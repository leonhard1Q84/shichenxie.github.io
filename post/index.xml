<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 谢士晨 | Shichen Xie</title>
    <link>/post/</link>
    <description>Recent content in Posts on 谢士晨 | Shichen Xie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用R语言开发评分卡模型案例</title>
      <link>/post/2018/01/05/scorecard/</link>
      <pubDate>Fri, 05 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/05/scorecard/</guid>
      <description>为了提高信用评分卡的建模效率，我完成了第一个开源项目R包scorecard的开发(Github, CRAN)。该包提供了评分卡开发过程中的常用功能，例如：变量粗筛、最优分箱、模型评估、评分刻度转换等。
评分卡模型的开发流程通常包括以下五个主要步骤：数据准备、变量选择、逻辑回归、模型验证、评分卡刻度与实施。更加详细的信息请参考幻灯片-使用R语言开发评分卡模型。下面结合scorecard包完成一个简单的评分卡模型开发案例。
# 加载[data.table](http://r-datatable.com)与scorecard包。 library(data.table) # 一个超高性能的数据处理包。 library(scorecard) # 加载scorecard包中的德国信贷数据集。该数据集包含了1000个信贷样本 # 20个特征，其详细信息请参考&amp;lt;https://archive.ics.uci.edu/ml/ # datasets/Statlog+(German+Credit+Data)&amp;gt;。 data(&amp;quot;germancredit&amp;quot;) dim(germancredit) # 数据集的违约标签为creditability # 将其中违约样本的标签赋值为1，好样本的赋值为0。 dt = setDT(germancredit)[ ,creditability := ifelse(creditability==&amp;quot;bad&amp;quot;,1,0)] # 样本粗筛。 # 默认删除信息值小于0.02、缺失率大于95%或单类别比例大于95%的变量 # 可通过iv_limit, na_perc_limit, ele_perc_limit分别设定。 # var_rm与var_kp可以指定需要强制删除或强制保留的变量 # 如果return_rm_reason=TRUE，则返回删除变量的原因 dt_s = var_filter(dt, &amp;quot;creditability&amp;quot;) dim(dt_s) # 将数据集随机拆分为训练集与测试集。 # y为标签，如果不指定则随机拆分，反之则按照y的值分层拆分 # ratio为拆分后两个数据集样本数比例 # seed为随机种子，从而重现拆分样本 dt_list = split_df(dt_s, y=&amp;quot;creditability&amp;quot;, ratio=0.6, seed=30) train = dt_list$train; test = dt_list$test; # 由于数据集样本较少，后面的分箱过程采用全样本进行 # 最优分箱。通过决策树的形式寻找最优分箱点。 # 默认当信息值增益率小于0.1, 或分箱数大于5(缺失值除外)时停止分箱。 bins = woebin(dt_s, &amp;quot;creditability&amp;quot;, print_step = 0) # bins 数据类型 class(bins) # 打印第一个变量的分箱 bins[[1]] # 绘制第一个变量的分箱图 woebin_plot(bins[[1]]) # 手动调整分箱。通过breaks_list指定分箱点 # 其中类别变量通过 %,% 相连 breaks_adj = list( age.</description>
    </item>
    
    <item>
      <title>stringr与regex函数对应关系</title>
      <link>/post/2017/07/25/datamani/</link>
      <pubDate>Tue, 25 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/07/25/datamani/</guid>
      <description>stringr是Hadley大神写的tidyverse1系列数据处理包中专门处理文本数据的，其函数命名统一易于记忆。而R基础包中的文本处理函数(regex)的命名规则不是特别统一。下表给出了主要函数的映射关系，便于以后查看。
   stringr包中函数 功能说明 R Base中对应函数     使用正则表达式的函数     str_extract() 提取首个匹配模式的字符 regmatches()   str_extract_all() 提取所有匹配模式的字符 regmatches()   str_locate() 返回首个匹配模式的字符的位置 regexpr()   str_locate_all() 返回所有匹配模式的字符的位置 gregexpr()   str_replace() 替换首个匹配模式 sub()   str_replace_all() 替换所有匹配模式 gsub()   str_split() 按照模式分割字符串 strsplit()   str_split_fixed() 按照模式将字符串分割成指定个数 -   str_detect() 检测字符是否存在某些指定模式 grepl()   str_count() 返回指定模式出现的次数 -   其他重要函数     str_sub() 提取指定位置的字符 regmatches()   str_dup() 丢弃指定位置的字符 -   str_length() 返回字符的长度 nchar()   str_pad() 填补字符 -   str_trim() 丢弃填充，如去掉字符前后的空格 -   str_c() 连接字符 paste(),paste0()     r与python中三个数据处理系列包：data.</description>
    </item>
    
    <item>
      <title>Markdown相关资料</title>
      <link>/post/2017/04/05/markdown/</link>
      <pubDate>Wed, 05 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/04/05/markdown/</guid>
      <description> John Gruber&amp;rsquo;s Markdown syntax (中文翻译) John MacFarlane&amp;rsquo;s Pandoc Markdown (中文翻译) Blackfriday Markdown (github) RMarkdown (github) MathJax (中文版)  </description>
    </item>
    
    <item>
      <title>在ubuntu上配置vnpy</title>
      <link>/post/2017/04/04/ubuntu-vnpy/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/04/04/ubuntu-vnpy/</guid>
      <description> vnpy是基于python的中文开源交易平台开发框架，该项目相关信息参见github主页、官方主页、项目知乎专栏、官方社区维恩派、作者知乎主页。
目前CTP只提供Windows和Linux的接口，所以在ubuntu上配置vnpy1，主要包括三步，1.安装python环境anaconda2，2.安装mongodb与相关依赖工具，3.安装vnpy框架
安装anaconda 出于速度方面的考虑，目前vnpy官方建议使用python2.*环境。从continuum官方网站下载Python 2.7版Linux 64位的anaconda安装文件，我这里下载了anaconda2-4.3.1（官方建议下载4.0版本）。然后在terminal中cd到下载的anaconda文件夹，运行如下命令:
bash Anaconda2-4.3.1-Linux-x86_64.sh  安装mongodb 在ubuntu中安装mongodb非常简单，在terminal中输入如下命令:
sudo apt-get install mongodb  然后安装pymongo包与Qt黑色主题
conda install pymongo qdarkstyle  以及编译API相关的工具
sudo apt-get install git build-essential libboost-all-dev python-dev cmake  安装vnpy框架 最后从github上下载vnpy项目库。我先Fork了vnpy的GitHub项目库，然后clone到本地：
git clone git@github.com:shichenxie/vnpy.git  在terminal中打开vn.trader文件夹(cd vnpy/vn.trader)，运行python vtMain.py。但是出现缺少PyQt4包的错误(ImportError: No module named PyQt4.QtCore)。原来新版anaconda已默认集成pyqt52，解决方法是安装anaconda4.0版本或者安装需要pyqt4的python包(conda install pyqtgraph)
再次运行python vtMain.py，出现缺少talib包错误，解决方法3conda install -chttps://conda.anaconda.org/quantopian ta-lib
 详细参考vn.trader的Ubuntu运行环境搭建教程 [return] 参考vn.py安装后无法打开，提示No module named PyQt4.QtCore [return] 参考ubuntu下面安装ta-lib库 [return]   </description>
    </item>
    
    <item>
      <title>博客搭建过程</title>
      <link>/post/2017/03/21/new-site/</link>
      <pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/03/21/new-site/</guid>
      <description>在“我网故我在”的召唤下，我用R语言的blogdown包1和GitHubPages在一小时内搭建了本博客。搭建过程分为三个步骤：编辑网站文件、创建GitHub Pages仓库、域名绑定。
编辑网站文件 首先需要编写网站文件，也就是一堆HTML、JS、CSS文件。益辉的blogdown让静态网站文件编写简单到了一条R语句。在编辑网站文件之前，最好用RStudio新建一个空的项目文件夹，便于文件管理。在R中敲入如下代码
# 安装blogdown包 devtools::install_github(&#39;rstudio/blogdown&#39;) setwd(path) # path为新建的项目文件夹路径 # 或者直接用rstudio打开*.Rproj文件 # 创建网站文件 blogdown::new_site() # &amp;gt; sessionInfo() # R语言系统环境 # R version 3.3.2 (2016-10-31) # Platform: x86_64-apple-darwin13.4.0 (64-bit) # Running under: macOS Sierra 10.12.3  创建GitHub Pages仓库 登录自己的github主页（https://github.com/shichenxie，其中shichenxie为我的github账号），新建名为shichenxie.github.io的项目仓库(repository)。
然后将blogdown创建的public文件夹上传到github pages文件夹中。在terminal中敲入如下代码2
cd path # path为public文件地址 git init # 初始化git git remote add origin git@github.com:shichenxie/shichenxie.github.io.git git add -A # git中添加所有文件 git commit -m &#39;init site&#39; # commit git push -u origin master # push  绑定域名 首先在public文件夹添加名为CNAME的文件（无任何后缀名），然后用文本编辑器打开，写入网站域名(我的网站域名为shichen.</description>
    </item>
    
  </channel>
</rss>